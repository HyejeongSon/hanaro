generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  phone         String?
  image         String?
  role          Role      @default(USER)

  accounts      Account[]
  // sessions      Session[]
  boards        Board[]
  boardReaction BoardReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  boards Board[]
}

model Board {
  id      Int    @id @default(autoincrement())
  title   String
  content String

  userId     String          @map("user_id")
  categoryId Int             @map("category_id")
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reactions  BoardReaction[]
  Image      Image[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // @@index([title, content]) // 검색용
}

model Image {
  id        Int      @id @default(autoincrement())
  boardId   Int      @map("board_id")
  url       String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model BoardReaction {
  id      Int          @id @default(autoincrement())
  userId  String       @map("user_id")
  boardId Int          @map("board_id")
  type    ReactionType // LIKE / DISLIKE

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, boardId]) // 중복 좋아요 방지
  @@map("board_reaction")
}

enum ReactionType {
  LIKE
  DISLIKE
}
